{"remainingRequest":"/home/dclz/vivexelt/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dclz/vivexelt/src/pages/AboutUs.vue?vue&type=template&id=9c6c46d2&","dependencies":[{"path":"/home/dclz/vivexelt/src/pages/AboutUs.vue","mtime":1620438434181},{"path":"/home/dclz/vivexelt/node_modules/cache-loader/dist/cjs.js","mtime":1620142631738},{"path":"/home/dclz/vivexelt/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1620142639126},{"path":"/home/dclz/vivexelt/node_modules/cache-loader/dist/cjs.js","mtime":1620142631738},{"path":"/home/dclz/vivexelt/node_modules/vue-loader/lib/index.js","mtime":1620142639126}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXY+CiAgPGRpdiBjbGFzcz0icGFnZS1oZWFkZXIgcGFnZS1oZWFkZXItc21hbGwiPgogICAgPHBhcmFsbGF4CiAgICAgIGNsYXNzPSJwYWdlLWhlYWRlci1pbWFnZSIKICAgICAgc3R5bGU9ImJhY2tncm91bmQtaW1hZ2U6IHVybCgnaW1nL2JnNi5qcGcnKSIKICAgID4KICAgIDwvcGFyYWxsYXg+CiAgICA8ZGl2IGNsYXNzPSJjb250ZW50LWNlbnRlciI+CiAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgPGgxIGNsYXNzPSJ0aXRsZSI+VGhpcyBpcyBvdXIgZ3JlYXQgY29tcGFueS48L2gxPgogICAgICAgIDxkaXYgY2xhc3M9InRleHQtY2VudGVyIj4KICAgICAgICAgIDxhIGhyZWY9IiNwYWJsbyIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBidG4taWNvbiBidG4tcm91bmQiPgogICAgICAgICAgICA8aSBjbGFzcz0iZmFiIGZhLWZhY2Vib29rLXNxdWFyZSI+PC9pPgogICAgICAgICAgPC9hPgogICAgICAgICAgPGEgaHJlZj0iI3BhYmxvIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IGJ0bi1pY29uIGJ0bi1yb3VuZCI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJmYWIgZmEtdHdpdHRlciI+PC9pPgogICAgICAgICAgPC9hPgogICAgICAgICAgPGEgaHJlZj0iI3BhYmxvIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IGJ0bi1pY29uIGJ0bi1yb3VuZCI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJmYWIgZmEtZ29vZ2xlLXBsdXMiPjwvaT4KICAgICAgICAgIDwvYT4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KICA8ZGl2IGNsYXNzPSJzZWN0aW9uIHNlY3Rpb24tYWJvdXQtdXMiIGlkPSJob21lIj4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTcgbWwtYXV0byBtci1hdXRvIHRleHQtbGVmdCI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJhYm91dC1zZWN0aW9uIHMtcGI0OCIgaWQ9IndoYXQtaXMtdml2ZXhlbHQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJhYm91dC1oZWFkZXIgcy1wYjI0Ij5XaGF0IGlzIFZpVkVYRUxUPzwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJhYm91dC1ib2R5Ij4KICAgICAgICAgICAgICBWaVZFWEVMVCBpcyBhIHByb2plY3QgZnVuZGVkIGJ5IHRoZSBCcml0aXNoIENvdW5jaWwgYW5kCiAgICAgICAgICAgICAgc3VwcG9ydGVkIGJ5IHRoZSBOYXRpb25hbCBGb3JlaWduIExhbmd1YWdlIFByb2plY3QgaW4gVmlldG5hbQogICAgICAgICAgICAgIHRocm91Z2ggdGhlIOKAmERpZ2l0YWwgTGVhcm5pbmcgSW5ub3ZhdGlvbiBGdW5k4oCZIGluaXRpYXRpdmUgdGhhdAogICAgICAgICAgICAgIGFpbXMgdG8gZW5jb3VyYWdlIHBhcnRuZXJzaGlwcyBiZXR3ZWVuIHRoZSBVSyBhbmQgVmlldG5hbSB3aGljaAogICAgICAgICAgICAgIGdlbmVyYXRlIG5ldyByZXNlYXJjaCwgaW5zaWdodCBhbmQvb3IgaW5ub3ZhdGlvbnMgdG8gaW1wcm92ZSB0aGUKICAgICAgICAgICAgICB0ZWFjaGluZyBhbmQgbGVhcm5pbmcgb2YgRW5nbGlzaC4gV2l0aCB0aGUgaW1wYWN0IG9mIENvdmlkLTE5IG9uCiAgICAgICAgICAgICAgbGVhcm5pbmcsIEJyaXRpc2ggQ291bmNpbCBhbmQgVmlldG5hbeKAmXMgTmF0aW9uYWwgRm9yZWlnbgogICAgICAgICAgICAgIExhbmd1YWdlcyBQcm9qZWN0IChORkxQKSBhcmUga2VlbiB0byBlbnN1cmUgdGhhdCBmdXR1cmUgcmVtb3RlCiAgICAgICAgICAgICAgYW5kIG9ubGluZSBsZWFybmluZyBvcHBvcnR1bml0aWVzIGFyZSBtb3JlIGVxdWl0YWJsZSBhbmQKICAgICAgICAgICAgICBhY2Nlc3NpYmxlIHRvIGFsbCwgcmF0aGVyIHRoYW4ganVzdCBhIGZldywgYW5kIHRoYXQgdGhleSBhcmUKICAgICAgICAgICAgICBzdXN0YWluYWJsZSBvdmVyIHRpbWUuIFZpVkVYRUxUIGFkZHJlc3NlcyBFTFQgY2FwYWNpdHkgYnVpbGRpbmcKICAgICAgICAgICAgICBhbmQgZGlnaXRhbCBjb21wZXRlbmNlIGVuaGFuY2VtZW50IHRocm91Z2ggdGhlIGNyZWF0aW9uIG9mCiAgICAgICAgICAgICAgY3Jvc3Mtc2VjdGlvbmFsIEVMVCBuZXR3b3JrcyBhcyBjb21tdW5pdGllcyBvZiBwcmFjdGljZQogICAgICAgICAgICAgIHN1cHBvcnRlZCBieSBhIFZpcnR1YWwgRXhjaGFuZ2UgY291cnNlLiBWRSBlbmFibGVzIHN1c3RhaW5lZCwKICAgICAgICAgICAgICB0ZWNobm9sb2d5LWVuYWJsZWQsIHJlc2VhcmNoIGluZm9ybWVkLCBwZW9wbGUtdG8tcGVvcGxlCiAgICAgICAgICAgICAgZWR1Y2F0aW9uIHByb2dyYW1tZXMgb3IgYWN0aXZpdGllcyBpbiB3aGljaCBjb25zdHJ1Y3RpdmUKICAgICAgICAgICAgICBjb21tdW5pY2F0aW9uIGFuZCBpbnRlcmFjdGlvbiB0YWtlcyBwbGFjZSBiZXR3ZWVuIGluZGl2aWR1YWxzIG9yCiAgICAgICAgICAgICAgZ3JvdXBzIHdobyBhcmUgZ2VvZ3JhcGhpY2FsbHkgc2VwYXJhdGVkIGFuZC9vciBmcm9tIGRpZmZlcmVudAogICAgICAgICAgICAgIGN1bHR1cmFsIGJhY2tncm91bmRzLCB3aXRoIHRoZSBzdXBwb3J0IG9mIGVkdWNhdG9ycyBvcgogICAgICAgICAgICAgIGZhY2lsaXRhdG9ycyAoSGVsbSAyMDE5KS4gVGhlIHBhcnRpY2lwYW50cyBhcmUgcHJhY3Rpc2luZwogICAgICAgICAgICAgIEVuZ2xpc2ggTGFuZ3VhZ2UgdGVhY2hlcnMgYW5kIHN0dWRlbnRzIGluIHRlYWNoZXIgZWR1Y2F0aW9uIHdobwogICAgICAgICAgICAgIHdpbGwgcmVmbGVjdCDigJhpbuKAmSBhY3Rpb24sIOKAmG9u4oCZIGFjdGlvbuKAmSBhbmQg4oCYZm9yIGFjdGlvbuKAmSB0aHJvdWdoCiAgICAgICAgICAgICAgYSBWRSBjb3Vyc2UsIGV4cGxvcmluZyBib3RoIHRoZSBsb2NhbCBhbmQgdGhlIGdsb2JhbCBFTFQgbmVlZHMKICAgICAgICAgICAgICBhbmQgY29tcGV0ZW5jaWVzIGZvciB0aGUgMjFzdCBjZW50dXJ5LCB3aGljaCBoYXMgYmVlbiBtYWRlIG1vcmUKICAgICAgICAgICAgICB1cmdlbnQgYnkgdGhlIENPVklEIDE5IFBhbmRlbWljLCBmb3JjaW5nIG1hbnkgdGVhY2hlcnMgdG8gbW92ZQogICAgICAgICAgICAgIHRvIG9ubGluZSBkZWxpdmVyeS4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImFib3V0LXNlY3Rpb24gcy1wYjQ4IiBpZD0id2hhdC1pcy12aXZleGVsdC1haW1zLXRvIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWJvdXQtaGVhZGVyIHMtcGIyNCI+V2hhdCBWaVZFWEVMVCBhaW1zIHRvPzwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJhYm91dC1ib2R5Ij4KICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgIERldmVsb3AgYSBub3ZlbCBhbmQgc3VzdGFpbmFibGUg4oCYYm90dG9tLXVw4oCZIGFuZCBpbmNsdXNpdmUKICAgICAgICAgICAgICAgICAgZGlnaXRhbCBtb2RlbCBvZiBDUEQgKENvbnRpbnVvdXMgUHJvZmVzc2lvbmFsIERldmVsb3BtZW50KQogICAgICAgICAgICAgICAgICBmb3IgRUxUIHRyYWluaW5nL2VkdWNhdGlvbiBiYXNlZCBvbiByZWZsZWN0aXZlIHByYWN0aWNlCiAgICAgICAgICAgICAgICAgIHRocm91Z2ggYSBWRS1iYXNlZCBvbmxpbmUgY291cnNlIHRvIHN1cHBvcnQgdGhlCiAgICAgICAgICAgICAgICAgIGltcGxlbWVudGF0aW9uIG9mIHRoZSBOYXRpb25hbCBGb3JlaWduIExhbmd1YWdlIFByb2plY3QgaW4KICAgICAgICAgICAgICAgICAgVmlldG5hbTsKICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgIFRvIGNyZWF0ZSBhIFZpZXRuYW0vVUsgc3VzdGFpbmFibGUgY29tbXVuaXR5IG9mIEVMVCBWRQogICAgICAgICAgICAgICAgICBwcmFjdGljZSB0aGF0IHdpbGwgY29udGludWUgYWZ0ZXIgdGhlIHByb2plY3QgZW5kczsKICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgIFRvIHN1cHBvcnQgdGhlIFZpZXRuYW1lc2UgYW5kIFVLIEVMVCBwcm9mZXNzaW9uYWxzIChib3RoCiAgICAgICAgICAgICAgICAgIG5vdmljZSBhbmQgZXhwZXJpZW5jZWQpIHRvIGRldmVsb3AgdGhlIGludGVyYWN0aW9uYWwgYW5kCiAgICAgICAgICAgICAgICAgIGludGVyY3VsdHVyYWwgY29tcGV0ZW5jaWVzIHJlcXVpcmVkIHRvIHRlYWNoIG9ubGluZTsKICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgIFRvIGV4cGxvcmUgYW5kIHJlZmxlY3Qgb24gaW5ub3ZhdGl2ZSBkaWdpdGFsIHNvbHV0aW9ucyBpbgogICAgICAgICAgICAgICAgICBFTFQsIGluY2x1ZGluZyB0aGUgcmVwdXJwb3Npbmcgb2YgZXhpc3RpbmcgdG9vbHMgYW5kCiAgICAgICAgICAgICAgICAgIHBsYXRmb3JtcyBhbHJlYWR5IGRldmVsb3BlZCBieSB0aGUgTWluaXN0cnkgb2YgRWR1Y2F0aW9uIGFuZAogICAgICAgICAgICAgICAgICBUcmFpbmluZyAoTU9FVCkgYW5kL29yIHRoZSBCcml0aXNoIENvdW5jaWwgKGUuZy4gTU9PQ3MgZm9yCiAgICAgICAgICAgICAgICAgIEVMVCksIHRvIHN1cHBvcnQgdGhlIGZ1cnRoZXIgZGV2ZWxvcG1lbnQgb2YgaW50ZXJjdWx0dXJhbAogICAgICAgICAgICAgICAgICBjb21tdW5pY2F0aXZlIGNvbXBldGVuY2UgYW5kIHRoZSBmb3N0ZXJpbmcgb2YKICAgICAgICAgICAgICAgICAgc3R1ZGVudC1jZW50cmVkIEVMVCBwZWRhZ29neTsKICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgIFRvIGNyZWF0ZSBhY2Nlc3NpYmxlIGFuZCBpbmNsdXNpdmUgQ1BEIGRpZ2l0YWwgbGVhcm5pbmcKICAgICAgICAgICAgICAgICAgb2JqZWN0cyAoZS5nLiA1IHNob3J0IHZpZGVvcyBhbmQgMTAgb25saW5lIEVMVCBsZXNzb24KICAgICAgICAgICAgICAgICAgcGxhbnMpLCBhbmQgb3RoZXIgRUxULVZFIGd1aWRlcyBjby1kZXNpZ25lZCBhbmQgcHJvZHVjZWQgYnkKICAgICAgICAgICAgICAgICAgdGhlIFZpZXRuYW1lc2UtVUsgcGFydG5lcnMgaW4gY29sbGFib3JhdGlvbiB3aXRoCiAgICAgICAgICAgICAgICAgIHBhcnRpY2lwYXRpbmcgdGVhY2hlcnMgYW5kIHN0dWRlbnRzIGluIHRlYWNoZXIgZWR1Y2F0aW9uLgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0iYWJvdXQtc2VjdGlvbiBzLXBiNDgiIGlkPSJ3aG8taXMtdml2ZXhlbHQtZm9yIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWJvdXQtaGVhZGVyIHMtcGIyNCI+V2hvIGlzIFZpVkVYRUxUIGZvcj88L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWJvdXQtYm9keSI+CiAgICAgICAgICAgICAgVmlWRVhFTFQgaXMgZm9yIHRlYWNoZXJzIGFuZCBzdHVkZW50cyBpbnZvbHZlZCBpbiBFbmdsaXNoCiAgICAgICAgICAgICAgTGFuZ3VhZ2UgVGVhY2hlciBFZHVjYXRpb24gaW4gdGhlIHBvc3QgLTE4IHN0YXRlIHNlY3RvciBpbiB0aGUKICAgICAgICAgICAgICBVSyBhbmQgVmlldG5hbS4gV2UgaG9wZSB0aGF0IFZpVkVYRUxUIHdpbGwgc3VwcG9ydCB0aGUgY3JlYXRpb24KICAgICAgICAgICAgICBvZiBhIGNvbW11bml0eSBvZiBFTFQgcHJhY3RpY2UgdGhyb3VnaCBWaXJ0dWFsIEV4Y2hhbmdlLCB3aGVyZQogICAgICAgICAgICAgIEVuZ2xpc2ggbGFuZ3VhZ2UgdGVhY2hlcnMgY2FuIHByYWN0aWNlIGludGVyYWN0aW9uYWwgYW5kCiAgICAgICAgICAgICAgaW50ZXJjdWx0dXJhbCBvbmxpbmUgc2tpbGxzIHdoaWxlIGFsc28gbGVhcm5pbmcgbW9yZSBhYm91dCB0aGUKICAgICAgICAgICAgICB0aGVvcnkgYW5kIHByYWN0aWNlIG9mIEVuZ2xpc2ggbGFuZ3VhZ2UgbGVhcm5pbmcgYW5kIHRlYWNoaW5nLgogICAgICAgICAgICAgIFBhcnRpY2lwYW50cyB3aWxsIGJlIG9mZmVyZWQgZnJlZSBvbmxpbmUgY291cnNlcyBvbiBFTFQgdGhlb3J5CiAgICAgICAgICAgICAgYW5kIHByYWN0aWNlIGFuZCB3aWxsIHByYWN0aXNlIHRoZW0gb25saW5lIHRocm91Z2ggVmlydHVhbAogICAgICAgICAgICAgIEV4Y2hhbmdlcyBiZXR3ZWVuIHRoZSBVSyBhbmQgVmlldG5hbS4gT24gc3VjY2Vzc2Z1bCBjb21wbGV0aW9uCiAgICAgICAgICAgICAgb2YgdGhlIFZFIGNvdXJzZSwgcGFydGljaXBhbnRzIHdpbGwgYmUgcHJvdmlkZWQgd2l0aCBhbiBvZmZpY2lhbAogICAgICAgICAgICAgIGNlcnRpZmljYXRpb24gb2YgY29tcGxldGlvbiBhcHByb3ZlZCBieSB0aGUgQnJpdGlzaCBDb3VuY2lsIGFuZAogICAgICAgICAgICAgIHRoZSBOYXRpb25hbCBGb3JlaWduIExhbmd1YWdlIFByb2plY3QuIFNlbGVjdGVkIHBhcnRpY2lwYW50cwogICAgICAgICAgICAgIHdpbGwgYWxzbyBiZSBvZmZlcmVkIGF0dGVuZGFuY2UgYXQgYSBmcmVlIGNvbmZlcmVuY2UgaW4gTWFyY2gKICAgICAgICAgICAgICAyMDIyLiBBbGwgcGFydGljaXBhdGluZyB0ZWFjaGVycyBhbmQgc3R1ZGVudHMgaW4gdGVhY2hlcgogICAgICAgICAgICAgIGVkdWNhdGlvbiBmcm9tIFZpZXRuYW0gd2lsbCBiZSBnaXZlbiBhIHNtYWxsIG1vbmV0YXJ5IHJld2FyZCBmb3IKICAgICAgICAgICAgICB0aGVpciBjb250cmlidXRpb24gdG8gdGhlIHByb2plY3QuCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJhYm91dC1zZWN0aW9uIHMtcGI0OCIgaWQ9Im1lZXQtdml2ZXhlbHQtdGVhbSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFib3V0LWhlYWRlciBzLXBiMjQiPk1lZXQgVmlWRVhFTFQgVGVhbTwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJhYm91dC1ib2R5IHJvdyI+CiAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgY2xhc3M9ImFib3V0LWF2YSBjb2wtbGctNCIKICAgICAgICAgICAgICAgIHYtZm9yPSIodXNlciwgaW5kZXgpIGluIHByb2ZpbGUiCiAgICAgICAgICAgICAgICA6a2V5PSJpbmRleCIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJkLWJsb2NrIHMtcGIxMiIKICAgICAgICAgICAgICAgICAgOnNyYz0idXNlci5pbWFnZSIKICAgICAgICAgICAgICAgICAgOmFsdD0idXNlci5uYW1lIgogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LWJvbGQgdGV4dC11cHBlciBzLXBiMTIiPgogICAgICAgICAgICAgICAgICB7eyB1c2VyLm5hbWUgfX0KICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgIHt7IHVzZXIuc2hvcnRfZGVzY3JpcHRpb24gfX0KICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayA6dG89ImAvcHJvZmlsZS8ke2luZGV4fWAiPgogICAgICAgICAgICAgICAgICA8bi1idXR0b24gdHlwZT0icHJpbWFyeSIgcm91bmQgc2ltcGxlPkRldGFpbDwvbi1idXR0b24+CiAgICAgICAgICAgICAgICA8L3JvdXRlci1saW5rPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdgogICAgICAgICAgICBjbGFzcz0iYWJvdXQtc2VjdGlvbiBzLXBiNDgiCiAgICAgICAgICAgIGlkPSJ3aGVuLXdpbGwtdGhlLWNvdXJzZXMtdGFrZS1wbGFjZSIKICAgICAgICAgID4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWJvdXQtaGVhZGVyIHMtcGIyNCI+CiAgICAgICAgICAgICAgV2hlbiB3aWxsIHRoZSBjb3Vyc2VzIHRha2UgcGxhY2U/CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJhYm91dC1ib2R5Ij4KICAgICAgICAgICAgICBWaVZFWEVMVCBpcyBmb3IgdGVhY2hlcnMgYW5kIHN0dWRlbnRzIGludm9sdmVkIGluIEVuZ2xpc2gKICAgICAgICAgICAgICBMYW5ndWFnZSBUZWFjaGVyIEVkdWNhdGlvbiBpbiB0aGUgcG9zdCAtMTggc3RhdGUgc2VjdG9yIGluIHRoZQogICAgICAgICAgICAgIFVLIGFuZCBWaWV0bmFtLiBXZSBob3BlIHRoYXQgVmlWRVhFTFQgd2lsbCBzdXBwb3J0IHRoZSBjcmVhdGlvbgogICAgICAgICAgICAgIG9mIGEgY29tbXVuaXR5IG9mIEVMVCBwcmFjdGljZSB0aHJvdWdoIFZpcnR1YWwgRXhjaGFuZ2UsIHdoZXJlCiAgICAgICAgICAgICAgRW5nbGlzaCBsYW5ndWFnZSB0ZWFjaGVycyBjYW4gcHJhY3RpY2UgaW50ZXJhY3Rpb25hbCBhbmQKICAgICAgICAgICAgICBpbnRlcmN1bHR1cmFsIG9ubGluZSBza2lsbHMgd2hpbGUgYWxzbyBsZWFybmluZyBtb3JlIGFib3V0IHRoZQogICAgICAgICAgICAgIHRoZW9yeSBhbmQgcHJhY3RpY2Ugb2YgRW5nbGlzaCBsYW5ndWFnZSBsZWFybmluZyBhbmQgdGVhY2hpbmcuCiAgICAgICAgICAgICAgUGFydGljaXBhbnRzIHdpbGwgYmUgb2ZmZXJlZCBmcmVlIG9ubGluZSBjb3Vyc2VzIG9uIEVMVCB0aGVvcnkKICAgICAgICAgICAgICBhbmQgcHJhY3RpY2UgYW5kIHdpbGwgcHJhY3Rpc2UgdGhlbSBvbmxpbmUgdGhyb3VnaCBWaXJ0dWFsCiAgICAgICAgICAgICAgRXhjaGFuZ2VzIGJldHdlZW4gdGhlIFVLIGFuZCBWaWV0bmFtLiBPbiBzdWNjZXNzZnVsIGNvbXBsZXRpb24KICAgICAgICAgICAgICBvZiB0aGUgVkUgY291cnNlLCBwYXJ0aWNpcGFudHMgd2lsbCBiZSBwcm92aWRlZCB3aXRoIGFuIG9mZmljaWFsCiAgICAgICAgICAgICAgY2VydGlmaWNhdGlvbiBvZiBjb21wbGV0aW9uIGFwcHJvdmVkIGJ5IHRoZSBCcml0aXNoIENvdW5jaWwgYW5kCiAgICAgICAgICAgICAgdGhlIE5hdGlvbmFsIEZvcmVpZ24gTGFuZ3VhZ2UgUHJvamVjdC4gU2VsZWN0ZWQgcGFydGljaXBhbnRzCiAgICAgICAgICAgICAgd2lsbCBhbHNvIGJlIG9mZmVyZWQgYXR0ZW5kYW5jZSBhdCBhIGZyZWUgY29uZmVyZW5jZSBpbiBNYXJjaAogICAgICAgICAgICAgIDIwMjIuIEFsbCBwYXJ0aWNpcGF0aW5nIHRlYWNoZXJzIGFuZCBzdHVkZW50cyBpbiB0ZWFjaGVyCiAgICAgICAgICAgICAgZWR1Y2F0aW9uIGZyb20gVmlldG5hbSB3aWxsIGJlIGdpdmVuIGEgc21hbGwgbW9uZXRhcnkgcmV3YXJkIGZvcgogICAgICAgICAgICAgIHRoZWlyIGNvbnRyaWJ1dGlvbiB0byB0aGUgcHJvamVjdC4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2CiAgICAgICAgICBjbGFzcz0iY29sLW1kLTMgbWwtYXV0byBtci1hdXRvIHRleHQtbGVmdCBmaXhlZC1zY3JvbGwiCiAgICAgICAgICBzdHlsZT0iaGVpZ2h0OiA1MDBweCIKICAgICAgICA+CiAgICAgICAgICA8c2Nyb2xsYWN0aXZlCiAgICAgICAgICAgIDpvZmZzZXQ9IjQwMCIKICAgICAgICAgICAgOnNjcm9sbE9mZnNldD0iMTAwIgogICAgICAgICAgICA6ZHVyYXRpb249IjEwMCIKICAgICAgICAgICAgYmV6aWVyLWVhc2luZy12YWx1ZT0iLjUsMCwuMzUsMSIKICAgICAgICAgICAgYWN0aXZlQ2xhc3M9ImFjdGl2ZSIKICAgICAgICAgICAgOnNjcm9sbE9uU3RhcnQ9ImZhbHNlIgogICAgICAgICAgPgogICAgICAgICAgICA8dWwgY2xhc3M9ImNhdGVnb3JpZXMiPgogICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgIDxhIGhyZWY9IiN3aGF0LWlzLXZpdmV4ZWx0IiBjbGFzcz0ic2Nyb2xsYWN0aXZlLWl0ZW0iPgogICAgICAgICAgICAgICAgICBXaGF0IGlzIFZpVkVYRUxUPwogICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLWNhcmV0LWxlZnQiPjwvaT4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgIDxhIGhyZWY9IiN3aGF0LWlzLXZpdmV4ZWx0LWFpbXMtdG8iIGNsYXNzPSJzY3JvbGxhY3RpdmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgIFdoYXQgVmlWRVhFTFQgYWltcyB0bwogICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLWNhcmV0LWxlZnQiPjwvaT4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgIDxhIGhyZWY9IiN3aG8taXMtdml2ZXhlbHQtZm9yIiBjbGFzcz0ic2Nyb2xsYWN0aXZlLWl0ZW0iPgogICAgICAgICAgICAgICAgICBXaG8gaXMgVmlWRVhFTFQgZm9yPwogICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLWNhcmV0LWxlZnQiPjwvaT4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgIDxhIGhyZWY9IiNtZWV0LXZpdmV4ZWx0LXRlYW0iIGNsYXNzPSJzY3JvbGxhY3RpdmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgIE1lZXQgVmlWRVhFTFQgVGVhbQogICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLWNhcmV0LWxlZnQiPjwvaT4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgIGhyZWY9IiN3aGVuLXdpbGwtdGhlLWNvdXJzZXMtdGFrZS1wbGFjZSIKICAgICAgICAgICAgICAgICAgY2xhc3M9InNjcm9sbGFjdGl2ZS1pdGVtIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICBXaGVuIHdpbGwgdGhlIGNvdXJzZXMgdGFrZSBwbGFjZT8KICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1jYXJldC1sZWZ0Ij48L2k+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICAgIDwvc2Nyb2xsYWN0aXZlPgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2Pgo8L2Rpdj4K"},null]}