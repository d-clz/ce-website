{"remainingRequest":"/home/dclz/vivexelt-admin/node_modules/babel-loader/lib/index.js!/home/dclz/vivexelt-admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/dclz/vivexelt-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dclz/vivexelt-admin/src/views/Jobs/List.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dclz/vivexelt-admin/src/views/Jobs/List.vue","mtime":1620438743778},{"path":"/home/dclz/vivexelt-admin/node_modules/cache-loader/dist/cjs.js","mtime":1620142631738},{"path":"/home/dclz/vivexelt-admin/node_modules/babel-loader/lib/index.js","mtime":1620325525308},{"path":"/home/dclz/vivexelt-admin/node_modules/cache-loader/dist/cjs.js","mtime":1620142631738},{"path":"/home/dclz/vivexelt-admin/node_modules/vue-loader/lib/index.js","mtime":1620325533304}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["List.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <div v-if=\"isLoading\">\n      <base-header class=\"pb-6 pb-8 pt-5 pt-md-8 bg-gradient-blue\"> </base-header>\n      <b-container fluid class=\"mt--7\">\n        <card>\n          <dpmx-cl type=\"bullet\"></dpmx-cl>\n        </card>\n      </b-container>\n    </div>\n\n    <base-header class=\"pb-6 pb-8 pt-5 pt-md-8 bg-gradient-blue\" v-if=\"!isLoading\">\n      <b-row> </b-row>\n    </base-header>\n    <b-container fluid class=\"mt--7\" v-if=\"!isLoading\">\n      <b-row>\n        <b-col>\n          <b-card no-body>\n            <!-- Filter -->\n            <b-card-header class=\"border-0\">\n              <b-input-group class>\n                <div class=\"input-group-prepend\">\n                  <span class=\"input-group-text\">\n                    <i class=\"fas fa-search\"></i>\n                  </span>\n                </div>\n                <b-form-input placeholder=\"Search\" type=\"text\" v-model=\"filter.name\"></b-form-input>\n                <b-input-group-append>\n                  <b-button v-b-toggle.collapse-1 variant=\"info\" @click=\"debounceFetchVideos()\"\n                    >Search</b-button\n                  >\n                </b-input-group-append>\n              </b-input-group>\n              <b-collapse id=\"collapse-4\" v-model=\"visibleBulkAction\" class=\"mt-2\">\n                <span class=\"pr-15\">{{ jobSelected.length }} selected</span>\n                <b-dropdown id=\"dropdown-1\" variant=\"secondary\" text=\"Action\" class=\"m-md-2\">\n                  <b-dropdown-item @click=\"toggleConfirmModal(true)\">Delete</b-dropdown-item>\n                </b-dropdown>\n              </b-collapse>\n            </b-card-header>\n            <el-table\n              class=\"table-responsive table dpxm-table\"\n              header-row-class-name=\"thead-light\"\n              :data=\"posts\"\n              @selection-change=\"selectionChanged\"\n            >\n              <el-table-column type=\"selection\" width=\"90\"></el-table-column>\n              <el-table-column label=\"Image thumbnail\" prop=\"short_description\" min-width=\"90px\">\n                <template v-slot=\"{ row }\">\n                  <span class=\"font-16\">\n                    <img alt=\"Image placeholder\" width=\"50px\" :src=\"url + row.filename\" />\n                  </span>\n                </template>\n              </el-table-column>\n              <el-table-column label=\"Title\" min-width=\"300px\" prop=\"name\">\n                <template v-slot=\"{ row }\">\n                  <router-link :to=\"`/post/${row.id}`\">\n                    <b-media no-body class=\"align-items-center\">\n                      <b-media-body>\n                        <span class=\"font-weight-600 name mb-0 text-sm\">\n                          {{ row.title }}\n                        </span>\n                      </b-media-body>\n                    </b-media>\n                  </router-link>\n                </template>\n              </el-table-column>\n\n              <el-table-column label=\"Link video\" min-width=\"100px\">\n                <template v-slot=\"{ row }\">\n                  <span class=\"font-16\">\n                    <a :href=\"row.link_video\">Link video</a>\n                  </span>\n                </template>\n              </el-table-column>\n\n              <el-table-column label=\"Create At\" min-width=\"150px\" prop=\"status\">\n                <template v-slot=\"{ row }\">\n                  <span>{{ new Date(row.createAt).toISOString().split('T')[0] }}</span>\n                </template>\n              </el-table-column>\n\n              <el-table-column label=\"Action\" min-width=\"130px\">\n                <template v-slot=\"{ row }\">\n                  <base-button\n                    icon\n                    type=\"danger\"\n                    class=\"btn-sm\"\n                    @click=\"toggleConfirmModal(false, row.id)\"\n                    title=\"Delete\"\n                  >\n                    <i class=\"ni ni-fat-remove\"></i>\n                  </base-button>\n                </template>\n              </el-table-column>\n            </el-table>\n\n            <b-card-footer class=\"py-4 d-flex justify-content-end\">\n              <base-pagination\n                :per-page=\"filter.limit\"\n                :total=\"totalJobs\"\n                v-on:change=\"(val) => changePage(val)\"\n              ></base-pagination>\n            </b-card-footer>\n          </b-card>\n        </b-col>\n      </b-row>\n    </b-container>\n    <!--Confirm modal-->\n    <modal :show.sync=\"confirmModal.show\">\n      <h2>{{ this.confirmModal.message }}</h2>\n\n      <template slot=\"footer\">\n        <base-button type=\"link\" class=\"ml-auto\" @click=\"closeConfirmModal\">Close</base-button>\n        <base-button type=\"danger\" @click=\"doDelete\" :disabled=\"isLoading\">Delete</base-button>\n      </template>\n    </modal>\n  </div>\n</template>\n<script>\nimport { mapState, mapActions } from 'vuex'\nimport LightTable from '../Tables/RegularTables/LightTable'\nimport { HTTP } from '@/core/http-common'\nimport jobService from '@/api/jobService'\nimport countryService from '@/api/countryService'\nimport postService from '@/api/postService'\nimport { Table, TableColumn } from 'element-ui'\nimport debounce from 'lodash/debounce'\nimport {\n  MapMinimumDegree,\n  MapJobType,\n  MapJobStatus,\n  JobStatus,\n  MinimumDegree,\n  JobType,\n} from './constant/constant'\nimport { json } from 'd3'\n//import DpmxSelect from \"@/components/DpmxSelect\";\n\nexport default {\n  components: {\n    [Table.name]: Table,\n    [TableColumn.name]: TableColumn,\n  },\n  data() {\n    return {\n      filter: {\n        page: 1,\n        name: '',\n        limit: 50,\n        min_degree: undefined,\n        departments: [],\n        foses: [],\n        status: undefined,\n        countries_code: [],\n        type: undefined,\n      },\n      page: 1,\n      jobs: [],\n      departments: [],\n      fieldOfStudies: [],\n      countries: [],\n      isLoading: false,\n      totalJobs: 0,\n      openingJobs: 0,\n      soonJobs: 0,\n      closedJobs: 0,\n      jobSelected: [],\n      confirmModal: {\n        show: false,\n        message: '',\n      },\n      deleteMode: '',\n      entityId: 0,\n      visibleBulkAction: false,\n      firstTime: true,\n      posts: [],\n      url: process.env.VUE_APP_BASE_API_ENDPOINT + '/public/image/',\n    }\n  },\n  computed: {\n    // ...mapState(\"products\", {\n    //   all: state => state.all\n    // }),\n    // ...mapState(\"jobs\", {\n    //   jobs: state => state.all\n    // })\n    getJobStatus() {\n      return JobStatus.map((s) => {\n        let name = MapJobStatus().get(s) || s\n        return { name: name, value: s }\n      })\n    },\n    getMinimumDegrees() {\n      return MinimumDegree.map((s) => {\n        let name = MapMinimumDegree().get(s) || s\n        return { name: name, value: s }\n      })\n    },\n    getJobTypes() {\n      return JobType.map((s) => {\n        let name = MapJobType().get(s) || s\n        return { name: name, value: s }\n      })\n    },\n  },\n  methods: {\n    async init() {\n      postService.getAllPost(this.filter.page, this.filter.limit).then((data) => {\n        console.log(data)\n        if (!data.success) return\n        this.posts = data.posts\n        this.totalJobs = data.total\n      })\n    },\n    async filterJobs() {\n      this.isLoading = true\n      await this.getJobWithFilter()\n      await this.countJob()\n      this.isLoading = false\n    },\n    debounceFetchVideos: debounce(\n      async function () {\n        this.init()\n      },\n      500,\n      {\n        leading: true,\n        trailing: true,\n      }\n    ),\n    changePage(val) {\n      console.log(val)\n      this.filter.page = val\n    },\n    buildParamsForFilter() {\n      let params = {\n        page: this.filter.page,\n        name: this.filter.name,\n        limit: this.filter.limit,\n        fields: 'id,country_code,id,image_url,industry,min_degree,name,open_at,close_at,type',\n      }\n      if (this.filter.foses && this.filter.foses.length > 0) {\n        params.fos_ids = this.buildParamsForArray(this.filter.foses, 'id')\n      }\n      if (this.filter.departments) {\n        params.department_ids = this.buildParamsForArray(this.filter.departments, 'id')\n      }\n      if (this.filter.countries_code) {\n        params.countries_code = this.buildParamsForArray(this.filter.countries_code, 'code')\n      }\n      if (this.filter.status) {\n        params.status = this.filter.status.value\n      }\n      if (this.filter.min_degree) {\n        params.min_degree = this.filter.min_degree.value\n      }\n      if (this.filter.type) {\n        params.type = this.filter.type.value\n      }\n\n      return params\n    },\n    buildParamsForArray(array, key) {\n      let res = []\n      array.forEach((e) => {\n        res.push(e[key])\n      })\n      return res.join(',')\n    },\n    async getJobWithFilter() {\n      let jobRes = await jobService.getJobs(this.buildParamsForFilter())\n      if (!jobRes || !jobRes.success) {\n        // toast\n      }\n      if (jobRes.jobs) {\n        this.jobs = jobRes.jobs\n      }\n    },\n    async getAllFosAndDepartment() {\n      let res = await jobService.getFosAndDepartment()\n      if (!res || !res.success) {\n        // toast\n      }\n      if (res.departments) {\n        this.departments = res.departments\n      }\n      if (res.field_of_studies) {\n        this.fieldOfStudies = res.field_of_studies\n      }\n    },\n    async countJob() {\n      let params = this.buildParamsForFilter()\n      if (this.firstTime) {\n        params.with_statistic = true\n        this.firstTime = false\n      }\n      let res = await jobService.countJobs(params)\n      if (!res || !res.success) {\n        // toast\n      }\n      this.totalJobs = res.count || 0\n      this.soonJobs = res.count_soon || 0\n      this.openingJobs = res.count_available || 0\n      this.closedJobs = this.totalJobs - this.soonJobs - this.openingJobs\n    },\n    async getAllCountries() {\n      let res = await countryService.getAllCountry()\n      if (!res || !res.countries) {\n        // toast\n      }\n      this.countries = res.countries\n    },\n    selectionChanged(selection) {\n      this.jobSelected = selection\n    },\n\n    toggleConfirmModal(isMultiple, id) {\n      this.deleteMode = isMultiple === true ? 'multiple' : 'single'\n      if (id) {\n        this.entityId = id\n      }\n      this.confirmModal.show = true\n      if (this.deleteMode === 'single') {\n        this.confirmModal.message = `Delete this job?`\n      } else {\n        let length = this.jobSelected.length\n        let total = this.posts.length\n        this.confirmModal.message = `Delete ${length} out of ${total}?`\n      }\n    },\n    closeConfirmModal() {\n      this.confirmModal.show = false\n      this.confirmModal.message = ''\n      this.entityId = 0\n    },\n\n    getJobStatusType(start, end) {\n      let now = new Date().getTime() / 1000\n      if (start <= now && now < end) {\n        return 'success'\n      } else if (now > end) {\n        return 'warning'\n      } else {\n        return 'info'\n      }\n    },\n    getJobStatusDisplay(start, end) {\n      let now = new Date().getTime() / 1000\n      if (start <= now && now < end) {\n        return 'Opening'\n      } else if (now > end) {\n        return 'Closed'\n      } else {\n        return 'Scheduling'\n      }\n    },\n    getMinDegreeDisplay(degree) {\n      return MapMinimumDegree().get(degree) || degree\n    },\n    getJobTypeDisplay(type) {\n      return MapJobType().get(type) || type\n    },\n    getJobTypeDisplayClass(type) {\n      switch (type) {\n        case 'graduated':\n          return 'success'\n        default:\n          return 'info'\n      }\n      return\n    },\n    async doDelete() {\n      this.isLoading = true\n      let res = {}\n      let ids = []\n      if (this.deleteMode === 'single') {\n        res = await postService.deletePostById(this.entityId)\n        if (!res || !res.success || res.error_message) {\n          this.$notify({\n            verticalAlign: 'bottom',\n            horizontalAlign: 'center',\n            type: 'danger',\n            message: res.error_message || 'Something went wrong',\n          })\n        } else {\n          this.$notify({\n            verticalAlign: 'bottom',\n            horizontalAlign: 'center',\n            type: 'success',\n            message: `Delete successfully`,\n          })\n\n        }\n      } else {\n        this.jobSelected.forEach((e) => {\n          postService.deletePostById(e.id).then((res) => {\n            if (res && res.success) {\n              this.$notify({\n                verticalAlign: 'bottom',\n                horizontalAlign: 'center',\n                type: 'success',\n                message: `Delete successfully`,\n              })\n            } else {\n              this.$notify({\n                verticalAlign: 'bottom',\n                horizontalAlign: 'center',\n                type: 'danger',\n                message: res.error_message || 'Something went wrong',\n              })\n            }\n          })\n        })\n      }\n      this.entityId = 0\n      this.jobSelected = []\n      await this.init()\n      this.isLoading = false\n      this.closeConfirmModal()\n    },\n  },\n  mounted() {\n    this.init()\n  },\n  watch: {\n    filter: {\n      handler(val) {\n        this.debounceFetchVideos()\n      },\n      deep: true,\n    },\n    jobSelected: {\n      handler() {\n        if (this.jobSelected && this.jobSelected.length > 0) {\n          this.visibleBulkAction = true\n        } else {\n          this.visibleBulkAction = false\n        }\n      },\n      deep: true,\n    },\n  },\n}\n</script>\n"],"sourceRoot":"src/views/Jobs"}]}