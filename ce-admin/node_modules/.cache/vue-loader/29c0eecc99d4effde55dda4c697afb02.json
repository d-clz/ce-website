{"remainingRequest":"/home/dclz/vivexelt-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dclz/vivexelt-admin/src/components/DpmxEditor.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/dclz/vivexelt-admin/src/components/DpmxEditor.vue","mtime":1620325383194},{"path":"/home/dclz/vivexelt-admin/node_modules/css-loader/dist/cjs.js","mtime":1620142638911},{"path":"/home/dclz/vivexelt-admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1620325533304},{"path":"/home/dclz/vivexelt-admin/node_modules/postcss-loader/src/index.js","mtime":1620142639084},{"path":"/home/dclz/vivexelt-admin/node_modules/cache-loader/dist/cjs.js","mtime":1620142631738},{"path":"/home/dclz/vivexelt-admin/node_modules/vue-loader/lib/index.js","mtime":1620325533304}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLm1jZUVkaXRvciB0ZC5tY2VJZnJhbWVDb250YWluZXIgaWZyYW1lIHsKICAgIG1pbi1oZWlnaHQ6IDM1MHB4ICFpbXBvcnRhbnQ7Cn0KLm1jZUVkaXRvciB0YWJsZSB7CiAgICBoZWlnaHQ6IGF1dG8gIWltcG9ydGFudDsKfQo="},{"version":3,"sources":["DpmxEditor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8HA;AACA;AACA;AACA;AACA;AACA","file":"DpmxEditor.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <editor\n    :api-key=\"tinyMCEKey\"\n    :value=\"value\"\n    @input=\"onInput\"\n    :init=\"tinyMCEOptions\"\n    :plugins=\"tinyMCEOptions.plugins\"\n    class=\"height500\"\n  ></editor>\n</template>\n\n<script>\nimport Editor from '@tinymce/tinymce-vue'\nimport http from '@/core/services/http'\nexport default {\n  // OR register locally\n  name: 'dpmx-editor',\n  components: {\n    editor: Editor,\n  },\n  props: {\n    value: {\n      default: '',\n      type: String,\n    },\n    height: {\n      default: 500,\n      type: Number,\n    },\n    toolbar: Array,\n    hasSettingBar: {\n      default: true,\n      type: Boolean,\n    },\n    isUploadedImage: {\n      default: false,\n      type: Boolean,\n    },\n  },\n  computed: {\n    editorConfig() {\n      return {\n        plugins: [Essentials, Paragraph, Bold, Italic],\n        toolbar: ['bold', 'italic'],\n      }\n    },\n    tinyMCEKey() {\n      return process.env.VUE_APP_TINYMCE_KEY\n    },\n    tinyMCEOptions() {\n      const configOptions = {\n        selector: 'textarea#tiny-editor',\n        height: this.height,\n        menubar: false,\n        statusbar: false,\n        plugins:\n          'autoresize print preview importcss searchreplace autolink autosave save directionality visualblocks \\\n          visualchars fullscreen image link media code table charmap hr pagebreak nonbreaking anchor toc \\\n          insertdatetime advlist lists wordcount imagetools textpattern noneditable help charmap quickbars emoticons paste preview',\n\n        branding: false,\n        toolbar: [\n              'bold italic underline strikethrough | alignleft aligncenter alignright alignjustify | image media link anchor',\n              'code outdent indent blockquote | numlist bullist checklist |forecolor backcolor formatpainter removeformat pagebreak | table',\n              'searchreplace  preview fullscreen wordcount',\n              'fontselect fontsizeselect formatselect |',\n            ],\n        extended_valid_elements:\n          'svg[*],defs[*],pattern[*],desc[*],metadata[*],g[*],mask[*],path[*],line[*],marker[*],rect[*],circle[*],ellipse[*],polygon[*],polyline[*],linearGradient[*],radialGradient[*],stop[*],image[*],view[*],text[*],textPath[*],title[*],tspan[*],glyph[*],symbol[*],switch[*],use[*]',\n\n        //quickbars_insert_toolbar: 'quicktable',\n        toolbar_sticky: true,\n        autoresize_on_init: false,\n        init_instance_callback: function (editor) {\n          editor.on('OpenWindow', function () {\n            let elDialog = document.getElementsByClassName('tox-silver-sink')[0]\n\n            elDialog.style.visibility = 'visible'\n            elDialog.style.opacity = 1\n          })\n\n          editor.on('CloseWindow', function () {\n            let elDialog = document.getElementsByClassName('tox-silver-sink')[0]\n            elDialog.removeAttribute('style')\n            document.getElementsByClassName('tox-editor-header')[0].removeAttribute('style')\n          })\n        },\n        min_height: 500,\n        //content_style: '',\n      }\n      configOptions.images_upload_handler = this.imageUpload.bind(this)\n      return configOptions\n    },\n  },\n  data() {\n    return {\n      editorData: '',\n      isUpdatedNewUI: false,\n      // ...\n    }\n  },\n  methods: {\n    onInput(val) {\n      this.$emit('input', val)\n    },\n    async imageUpload(blobInfo, success, failure) {\n      this.isDisableButton = true\n      let formData = new FormData()\n      formData.append('file', blobInfo.blob(), blobInfo.filename())\n      const url = `/images.json`\n      const response = await http.post(url, formData)\n      if (response && response.success) {\n        success(response.image.src)\n        this.isDisableButton = false\n        return\n      }\n\n      if (response.error) {\n        failure(this.$t('common.description.the_image_upload_is_too_large'))\n      }\n    },\n  },\n  mounted() {},\n}\n</script>\n<style>\n.mceEditor td.mceIframeContainer iframe {\n    min-height: 350px !important;\n}\n.mceEditor table {\n    height: auto !important;\n}\n</style>\n"]}]}