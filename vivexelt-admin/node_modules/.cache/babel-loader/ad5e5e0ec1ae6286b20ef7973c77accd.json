{"remainingRequest":"/home/dclz/vivexelt-admin/node_modules/babel-loader/lib/index.js!/home/dclz/vivexelt-admin/node_modules/eslint-loader/index.js??ref--13-0!/home/dclz/vivexelt-admin/src/core/utils/hash.js","dependencies":[{"path":"/home/dclz/vivexelt-admin/src/core/utils/hash.js","mtime":1620325383198},{"path":"/home/dclz/vivexelt-admin/node_modules/cache-loader/dist/cjs.js","mtime":1620142631738},{"path":"/home/dclz/vivexelt-admin/node_modules/babel-loader/lib/index.js","mtime":1620325525308},{"path":"/home/dclz/vivexelt-admin/node_modules/eslint-loader/index.js","mtime":1620142637801}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmciOwoKLyoqCiAqIEdlbmVyYXRlIGd1aWQKICogQHJldHVybiB7Kn0KICovCmV4cG9ydCB2YXIgZ3VpZCA9IGZ1bmN0aW9uIGd1aWQoKSB7CiAgdmFyIHM0ID0gZnVuY3Rpb24gczQoKSB7CiAgICByZXR1cm4gTWF0aC5mbG9vcigoMSArIE1hdGgucmFuZG9tKCkpICogMHgxMDAwMCkudG9TdHJpbmcoNikuc3Vic3RyaW5nKDEpOwogIH07CgogIHJldHVybiBzNCgpICsgczQoKTsKfTsgLy8gZXhwb3J0IGNvbnN0IGJhc2U2NEVuY29kZSA9ICh2YWwpID0+IHZhbAovLyBleHBvcnQgY29uc3QgYmFzZTY0RGVjb2RlID0gKHZhbCkgPT4gdmFsCgpleHBvcnQgdmFyIGJhc2U2NEVuY29kZSA9IGZ1bmN0aW9uIGJhc2U2NEVuY29kZSh2YWwpIHsKICB2YXIgb2xkV2F5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTsKCiAgaWYgKG9sZFdheSkgewogICAgcmV0dXJuIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkpKTsKICB9CgogIHJldHVybiBidG9hKGVuY29kZVVSSSh2YWwpKTsKfTsKLyoqCiAqIGJhc2U2NCBkZWNvZGUKICogQHBhcmFtIHZhbAogKiBAcGFyYW0gb2xkV2F5CiAqLwoKZXhwb3J0IHZhciBiYXNlNjREZWNvZGUgPSBmdW5jdGlvbiBiYXNlNjREZWNvZGUodmFsLCBvbGRXYXkpIHsKICB2YXIgbmV3VmFsdWUgPSB2YWw7CgogIGlmICghaXNCYXNlNjQodmFsKSkgewogICAgbmV3VmFsdWUgPSBiYXNlNjRFbmNvZGUodmFsLCBvbGRXYXkpOwogIH0KCiAgaWYgKG9sZFdheSkgewogICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUoYXRvYihuZXdWYWx1ZSkpKTsKICB9CgogIHJldHVybiBkZWNvZGVVUkkoYXRvYihuZXdWYWx1ZSkpOwp9OwoKZnVuY3Rpb24gaXNCYXNlNjQoc3RyKSB7CiAgaWYgKHN0ciA9PT0gJycgfHwgc3RyLnRyaW0oKSA9PT0gJycpIHsKICAgIHJldHVybiBmYWxzZTsKICB9CgogIHRyeSB7CiAgICByZXR1cm4gYnRvYShhdG9iKHN0cikpID09IHN0cjsKICB9IGNhdGNoIChlcnIpIHsKICAgIHJldHVybiBmYWxzZTsKICB9Cn0="},{"version":3,"sources":["/home/dclz/vivexelt-admin/src/core/utils/hash.js"],"names":["guid","s4","Math","floor","random","toString","substring","base64Encode","val","oldWay","btoa","unescape","encodeURIComponent","encodeURI","base64Decode","newValue","isBase64","decodeURIComponent","escape","atob","decodeURI","str","trim","err"],"mappings":";;AAAA;;;;AAIA,OAAO,IAAMA,IAAI,GAAG,SAAPA,IAAO,GAAM;AACxB,MAAMC,EAAE,GAAG,SAALA,EAAK,GAAM;AACf,WAAOC,IAAI,CAACC,KAAL,CAAW,CAAC,IAAID,IAAI,CAACE,MAAL,EAAL,IAAsB,OAAjC,EACJC,QADI,CACK,CADL,EAEJC,SAFI,CAEM,CAFN,CAAP;AAGD,GAJD;;AAMA,SAAOL,EAAE,KAAKA,EAAE,EAAhB;AACD,CARM,C,CAUP;AAEA;;AAEA,OAAO,IAAMM,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD,EAAyB;AAAA,MAAnBC,MAAmB,uEAAV,KAAU;;AACnD,MAAIA,MAAJ,EAAY;AACV,WAAOC,IAAI,CAACC,QAAQ,CAACC,kBAAkB,CAACJ,GAAD,CAAnB,CAAT,CAAX;AACD;;AAED,SAAOE,IAAI,CAACG,SAAS,CAACL,GAAD,CAAV,CAAX;AACD,CANM;AAQP;;;;;;AAKA,OAAO,IAAMM,YAAY,GAAG,SAAfA,YAAe,CAACN,GAAD,EAAMC,MAAN,EAAiB;AAC3C,MAAIM,QAAQ,GAAGP,GAAf;;AACA,MAAI,CAACQ,QAAQ,CAACR,GAAD,CAAb,EAAoB;AAClBO,IAAAA,QAAQ,GAAGR,YAAY,CAACC,GAAD,EAAMC,MAAN,CAAvB;AACD;;AACD,MAAIA,MAAJ,EAAY;AACV,WAAOQ,kBAAkB,CAACC,MAAM,CAACC,IAAI,CAACJ,QAAD,CAAL,CAAP,CAAzB;AACD;;AAED,SAAOK,SAAS,CAACD,IAAI,CAACJ,QAAD,CAAL,CAAhB;AACD,CAVM;;AAYP,SAASC,QAAT,CAAkBK,GAAlB,EAAuB;AACrB,MAAIA,GAAG,KAAK,EAAR,IAAcA,GAAG,CAACC,IAAJ,OAAe,EAAjC,EAAqC;AACnC,WAAO,KAAP;AACD;;AACD,MAAI;AACF,WAAOZ,IAAI,CAACS,IAAI,CAACE,GAAD,CAAL,CAAJ,IAAmBA,GAA1B;AACD,GAFD,CAEE,OAAOE,GAAP,EAAY;AACZ,WAAO,KAAP;AACD;AACF","sourcesContent":["/**\n * Generate guid\n * @return {*}\n */\nexport const guid = () => {\n  const s4 = () => {\n    return Math.floor((1 + Math.random()) * 0x10000)\n      .toString(6)\n      .substring(1)\n  }\n\n  return s4() + s4()\n}\n\n// export const base64Encode = (val) => val\n\n// export const base64Decode = (val) => val\n\nexport const base64Encode = (val, oldWay = false) => {\n  if (oldWay) {\n    return btoa(unescape(encodeURIComponent(val)))\n  }\n\n  return btoa(encodeURI(val))\n}\n\n/**\n * base64 decode\n * @param val\n * @param oldWay\n */\nexport const base64Decode = (val, oldWay) => {\n  let newValue = val\n  if (!isBase64(val)) {\n    newValue = base64Encode(val, oldWay)\n  }\n  if (oldWay) {\n    return decodeURIComponent(escape(atob(newValue)))\n  }\n\n  return decodeURI(atob(newValue))\n}\n\nfunction isBase64(str) {\n  if (str === '' || str.trim() === '') {\n    return false\n  }\n  try {\n    return btoa(atob(str)) == str\n  } catch (err) {\n    return false\n  }\n}\n"]}]}