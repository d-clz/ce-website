{"remainingRequest":"/home/dclz/vivexelt-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dclz/vivexelt-admin/src/views/Jobs/List.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dclz/vivexelt-admin/src/views/Jobs/List.vue","mtime":1620325383198},{"path":"/home/dclz/vivexelt-admin/node_modules/cache-loader/dist/cjs.js","mtime":1620142631738},{"path":"/home/dclz/vivexelt-admin/node_modules/babel-loader/lib/index.js","mtime":1620325525308},{"path":"/home/dclz/vivexelt-admin/node_modules/cache-loader/dist/cjs.js","mtime":1620142631738},{"path":"/home/dclz/vivexelt-admin/node_modules/vue-loader/lib/index.js","mtime":1620325533304}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["List.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"List.vue","sourceRoot":"src/views/Jobs","sourcesContent":["<template>\n  <div>\n    <div v-if=\"isLoading\">\n      <base-header class=\"pb-6 pb-8 pt-5 pt-md-8 bg-gradient-success\"> </base-header>\n      <b-container fluid class=\"mt--7\">\n        <card>\n          <dpmx-cl type=\"bullet\"></dpmx-cl>\n        </card>\n      </b-container>\n    </div>\n\n    <base-header class=\"pb-6 pb-8 pt-5 pt-md-8 bg-gradient-success\" v-if=\"!isLoading\">\n      <b-row> </b-row>\n    </base-header>\n    <b-container fluid class=\"mt--7\" v-if=\"!isLoading\">\n      <b-row>\n        <b-col>\n          <b-card no-body>\n            <!-- Filter -->\n            <b-card-header class=\"border-0\">\n              <b-input-group class>\n                <div class=\"input-group-prepend\">\n                  <span class=\"input-group-text\">\n                    <i class=\"fas fa-search\"></i>\n                  </span>\n                </div>\n                <b-form-input placeholder=\"Search\" type=\"text\" v-model=\"filter.name\"></b-form-input>\n                <b-input-group-append>\n                  <b-button v-b-toggle.collapse-1 variant=\"info\" @click=\"debounceFetchVideos()\"\n                    >Search</b-button\n                  >\n                </b-input-group-append>\n              </b-input-group>\n              <b-collapse id=\"collapse-4\" v-model=\"visibleBulkAction\" class=\"mt-2\">\n                <span class=\"pr-15\">{{ jobSelected.length }} selected</span>\n                <b-dropdown id=\"dropdown-1\" variant=\"secondary\" text=\"Action\" class=\"m-md-2\">\n                  <b-dropdown-item @click=\"toggleConfirmModal(true)\">Delete</b-dropdown-item>\n                </b-dropdown>\n              </b-collapse>\n            </b-card-header>\n            <el-table\n              class=\"table-responsive table dpxm-table\"\n              header-row-class-name=\"thead-light\"\n              :data=\"posts\"\n              @selection-change=\"selectionChanged\"\n            >\n              <el-table-column type=\"selection\" width=\"90\"></el-table-column>\n              <el-table-column label=\"Title\" min-width=\"100px\" prop=\"name\">\n                <template v-slot=\"{ row }\">\n                  <router-link :to=\"`/post/${row.id}`\">\n                    <b-media no-body class=\"align-items-center\">\n                      <b-media-body>\n                        <span class=\"font-weight-600 name mb-0 text-sm\">\n                          {{ row.title }}\n                        </span>\n                      </b-media-body>\n                    </b-media>\n                  </router-link>\n                </template>\n              </el-table-column>\n\n              <el-table-column label=\"Image thumbnail\" prop=\"short_description\" min-width=\"300px\">\n                <template v-slot=\"{ row }\">\n                  <span class=\"font-16\">\n                    <img alt=\"Image placeholder\" width=\"50px\" :src=\"url + row.filename\" />\n                  </span>\n                </template>\n              </el-table-column>\n\n              <el-table-column label=\"Link video\" min-width=\"300px\">\n                <template v-slot=\"{ row }\">\n                  <span class=\"font-16\">\n                    <a :href=\"row.link_video\">Link video</a>\n                  </span>\n                </template>\n              </el-table-column>\n\n              <el-table-column label=\"Create At\" min-width=\"150px\" prop=\"status\">\n                <template v-slot=\"{ row }\">\n                  <span>{{ new Date(row.createAt).toISOString().split('T')[0] }}</span>\n                </template>\n              </el-table-column>\n\n              <el-table-column label=\"Action\" min-width=\"130px\">\n                <template v-slot=\"{ row }\">\n                  <base-button\n                    icon\n                    type=\"danger\"\n                    class=\"btn-sm\"\n                    @click=\"toggleConfirmModal(false, row.id)\"\n                    title=\"Delete\"\n                  >\n                    <i class=\"ni ni-fat-remove\"></i>\n                  </base-button>\n                </template>\n              </el-table-column>\n            </el-table>\n\n            <b-card-footer class=\"py-4 d-flex justify-content-end\">\n              <base-pagination\n                :per-page=\"filter.limit\"\n                :total=\"totalJobs\"\n                v-on:change=\"(val) => changePage(val)\"\n              ></base-pagination>\n            </b-card-footer>\n          </b-card>\n        </b-col>\n      </b-row>\n    </b-container>\n    <!--Confirm modal-->\n    <modal :show.sync=\"confirmModal.show\">\n      <h2>{{ this.confirmModal.message }}</h2>\n\n      <template slot=\"footer\">\n        <base-button type=\"link\" class=\"ml-auto\" @click=\"closeConfirmModal\">Close</base-button>\n        <base-button type=\"danger\" @click=\"doDelete\" :disabled=\"isLoading\">Delete</base-button>\n      </template>\n    </modal>\n  </div>\n</template>\n<script>\nimport { mapState, mapActions } from 'vuex'\nimport LightTable from '../Tables/RegularTables/LightTable'\nimport { HTTP } from '@/core/http-common'\nimport jobService from '@/api/jobService'\nimport countryService from '@/api/countryService'\nimport postService from '@/api/postService'\nimport { Table, TableColumn } from 'element-ui'\nimport debounce from 'lodash/debounce'\nimport {\n  MapMinimumDegree,\n  MapJobType,\n  MapJobStatus,\n  JobStatus,\n  MinimumDegree,\n  JobType,\n} from './constant/constant'\nimport { json } from 'd3'\n//import DpmxSelect from \"@/components/DpmxSelect\";\n\nexport default {\n  components: {\n    [Table.name]: Table,\n    [TableColumn.name]: TableColumn,\n  },\n  data() {\n    return {\n      filter: {\n        page: 1,\n        name: '',\n        limit: 50,\n        min_degree: undefined,\n        departments: [],\n        foses: [],\n        status: undefined,\n        countries_code: [],\n        type: undefined,\n      },\n      page: 1,\n      jobs: [],\n      departments: [],\n      fieldOfStudies: [],\n      countries: [],\n      isLoading: false,\n      totalJobs: 0,\n      openingJobs: 0,\n      soonJobs: 0,\n      closedJobs: 0,\n      jobSelected: [],\n      confirmModal: {\n        show: false,\n        message: '',\n      },\n      deleteMode: '',\n      entityId: 0,\n      visibleBulkAction: false,\n      firstTime: true,\n      posts: [],\n      url: 'http://localhost:3000/public/send-image/',\n    }\n  },\n  computed: {\n    // ...mapState(\"products\", {\n    //   all: state => state.all\n    // }),\n    // ...mapState(\"jobs\", {\n    //   jobs: state => state.all\n    // })\n    getJobStatus() {\n      return JobStatus.map((s) => {\n        let name = MapJobStatus().get(s) || s\n        return { name: name, value: s }\n      })\n    },\n    getMinimumDegrees() {\n      return MinimumDegree.map((s) => {\n        let name = MapMinimumDegree().get(s) || s\n        return { name: name, value: s }\n      })\n    },\n    getJobTypes() {\n      return JobType.map((s) => {\n        let name = MapJobType().get(s) || s\n        return { name: name, value: s }\n      })\n    },\n  },\n  methods: {\n    async init() {\n      postService.getAllPost(this.filter.page, this.filter.limit).then((data) => {\n        console.log(data)\n        if (!data.success) return\n        this.posts = data.posts\n        this.totalJobs = data.total\n      })\n    },\n    async filterJobs() {\n      this.isLoading = true\n      await this.getJobWithFilter()\n      await this.countJob()\n      this.isLoading = false\n    },\n    debounceFetchVideos: debounce(\n      async function () {\n        this.init()\n      },\n      500,\n      {\n        leading: true,\n        trailing: true,\n      }\n    ),\n    changePage(val) {\n      console.log(val)\n      this.filter.page = val\n    },\n    buildParamsForFilter() {\n      let params = {\n        page: this.filter.page,\n        name: this.filter.name,\n        limit: this.filter.limit,\n        fields: 'id,country_code,id,image_url,industry,min_degree,name,open_at,close_at,type',\n      }\n      if (this.filter.foses && this.filter.foses.length > 0) {\n        params.fos_ids = this.buildParamsForArray(this.filter.foses, 'id')\n      }\n      if (this.filter.departments) {\n        params.department_ids = this.buildParamsForArray(this.filter.departments, 'id')\n      }\n      if (this.filter.countries_code) {\n        params.countries_code = this.buildParamsForArray(this.filter.countries_code, 'code')\n      }\n      if (this.filter.status) {\n        params.status = this.filter.status.value\n      }\n      if (this.filter.min_degree) {\n        params.min_degree = this.filter.min_degree.value\n      }\n      if (this.filter.type) {\n        params.type = this.filter.type.value\n      }\n\n      return params\n    },\n    buildParamsForArray(array, key) {\n      let res = []\n      array.forEach((e) => {\n        res.push(e[key])\n      })\n      return res.join(',')\n    },\n    async getJobWithFilter() {\n      let jobRes = await jobService.getJobs(this.buildParamsForFilter())\n      if (!jobRes || !jobRes.success) {\n        // toast\n      }\n      if (jobRes.jobs) {\n        this.jobs = jobRes.jobs\n      }\n    },\n    async getAllFosAndDepartment() {\n      let res = await jobService.getFosAndDepartment()\n      if (!res || !res.success) {\n        // toast\n      }\n      if (res.departments) {\n        this.departments = res.departments\n      }\n      if (res.field_of_studies) {\n        this.fieldOfStudies = res.field_of_studies\n      }\n    },\n    async countJob() {\n      let params = this.buildParamsForFilter()\n      if (this.firstTime) {\n        params.with_statistic = true\n        this.firstTime = false\n      }\n      let res = await jobService.countJobs(params)\n      if (!res || !res.success) {\n        // toast\n      }\n      this.totalJobs = res.count || 0\n      this.soonJobs = res.count_soon || 0\n      this.openingJobs = res.count_available || 0\n      this.closedJobs = this.totalJobs - this.soonJobs - this.openingJobs\n    },\n    async getAllCountries() {\n      let res = await countryService.getAllCountry()\n      if (!res || !res.countries) {\n        // toast\n      }\n      this.countries = res.countries\n    },\n    selectionChanged(selection) {\n      this.jobSelected = selection\n    },\n\n    toggleConfirmModal(isMultiple, id) {\n      this.deleteMode = isMultiple === true ? 'multiple' : 'single'\n      if (id) {\n        this.entityId = id\n      }\n      this.confirmModal.show = true\n      if (this.deleteMode === 'single') {\n        this.confirmModal.message = `Delete this job?`\n      } else {\n        let length = this.jobSelected.length\n        let total = this.posts.length\n        this.confirmModal.message = `Delete ${length} out of ${total}?`\n      }\n    },\n    closeConfirmModal() {\n      this.confirmModal.show = false\n      this.confirmModal.message = ''\n      this.entityId = 0\n    },\n\n    getJobStatusType(start, end) {\n      let now = new Date().getTime() / 1000\n      if (start <= now && now < end) {\n        return 'success'\n      } else if (now > end) {\n        return 'warning'\n      } else {\n        return 'info'\n      }\n    },\n    getJobStatusDisplay(start, end) {\n      let now = new Date().getTime() / 1000\n      if (start <= now && now < end) {\n        return 'Opening'\n      } else if (now > end) {\n        return 'Closed'\n      } else {\n        return 'Scheduling'\n      }\n    },\n    getMinDegreeDisplay(degree) {\n      return MapMinimumDegree().get(degree) || degree\n    },\n    getJobTypeDisplay(type) {\n      return MapJobType().get(type) || type\n    },\n    getJobTypeDisplayClass(type) {\n      switch (type) {\n        case 'graduated':\n          return 'success'\n        default:\n          return 'info'\n      }\n      return\n    },\n    async doDelete() {\n      this.isLoading = true\n      let res = {}\n      let ids = []\n      if (this.deleteMode === 'single') {\n        res = await postService.deletePostById(this.entityId)\n        if (!res || !res.success || res.error_message) {\n          this.$notify({\n            verticalAlign: 'bottom',\n            horizontalAlign: 'center',\n            type: 'danger',\n            message: res.error_message || 'Something went wrong',\n          })\n        } else {\n          this.$notify({\n            verticalAlign: 'bottom',\n            horizontalAlign: 'center',\n            type: 'success',\n            message: `Delete job successfully`,\n          })\n          await this.init()\n          this.isLoading = false\n          this.closeConfirmModal()\n        }\n      } else {\n        this.jobSelected.forEach((e) => {\n          postService.deletePostById(e.id).then((res) => {\n            if (res && res.success) {\n              this.$notify({\n                verticalAlign: 'bottom',\n                horizontalAlign: 'center',\n                type: 'success',\n                message: `Delete job successfully`,\n              })\n            } else {\n              this.$notify({\n                verticalAlign: 'bottom',\n                horizontalAlign: 'center',\n                type: 'danger',\n                message: res.error_message || 'Something went wrong',\n              })\n            }\n          })\n        })\n      }\n\n      this.isLoading = false\n      this.closeConfirmModal()\n    },\n  },\n  mounted() {\n    this.init()\n  },\n  watch: {\n    filter: {\n      handler(val) {\n        this.debounceFetchVideos()\n      },\n      deep: true,\n    },\n    jobSelected: {\n      handler() {\n        if (this.jobSelected && this.jobSelected.length > 0) {\n          this.visibleBulkAction = true\n        } else {\n          this.visibleBulkAction = false\n        }\n      },\n      deep: true,\n    },\n  },\n}\n</script>\n"]}]}