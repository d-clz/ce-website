{"remainingRequest":"/home/dclz/vivexelt/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/dclz/vivexelt/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/dclz/vivexelt/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dclz/vivexelt/src/pages/AboutUs.vue?vue&type=template&id=9c6c46d2&","dependencies":[{"path":"/home/dclz/vivexelt/src/pages/AboutUs.vue","mtime":1620438434181},{"path":"/home/dclz/vivexelt/node_modules/cache-loader/dist/cjs.js","mtime":1620142631738},{"path":"/home/dclz/vivexelt/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1620142639126},{"path":"/home/dclz/vivexelt/node_modules/cache-loader/dist/cjs.js","mtime":1620142631738},{"path":"/home/dclz/vivexelt/node_modules/vue-loader/lib/index.js","mtime":1620142639126}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}